"""
Convert the raw data to be format.

As the personalized accuracies of clients are stored in the .csv file following the
 format:
 round, client_id, accuracy
    xx      xx      xx

I am going to convert it to be expected format such as:
 communication round, client_1, client_2, client_3, ...,
            xx          acc1,       acc2,   acc3

"""

from collections import OrderedDict
from collections import namedtuple
import os
import re

import numpy as np
import pandas as pd

ClinetEncodedData = namedtuple('ClientEncodedData',
                               ['client_id', 'round_', 'DOB'])


def decode_data(data_df):
    """ Decode the data extracted by the clients_acc_to_format.  """
    rounds_id = data_df["round"].tolist()

    rounds_clients_acc = [
        data_df.iloc[round_idx, 1:].dropna().to_numpy()
        for round_idx in range(len(rounds_id))
    ]

    rounds_avg_acc = [
        np.average(round_clients_acc)
        for round_clients_acc in rounds_clients_acc
    ]

    return rounds_clients_acc, rounds_avg_acc, rounds_id


def decode_clients_per_data(data_df):
    """ Decode the clients' personalized acc data extracted by obtain_format_personalized_data

        The input format is:
        round  epoch  client_1_accuracy  client_2_accuracy ... client_100_accuracy
    """

    rounds_id = data_df["round"].unique().tolist()
    epochs_id = data_df["epoch"].unique().tolist()

    rounds_epochs_clients_acc = []
    rounds_epochs_clients_id = []
    for round_id in rounds_id:
        epochs_clients_acc = []
        epochs_clients_id = []
        for epoch_id in epochs_id:
            round_epoch_df = data_df.loc[(data_df['round'] == round_id)
                                         & (data_df['epoch'] == epoch_id)]

            clients_columns_df = round_epoch_df.iloc[0, 2:]
            valid_columns_df = clients_columns_df.dropna()
            vaild_columns_name = valid_columns_df.index.tolist()

            vaild_cliends_id = np.array([
                int(col_name.split("_")[1]) for col_name in vaild_columns_name
            ])
            epochs_clients_acc.append(valid_columns_df.to_numpy())
            epochs_clients_id.append(vaild_cliends_id)

        rounds_epochs_clients_acc.append(tuple(epochs_clients_acc))
        rounds_epochs_clients_id.append(tuple(epochs_clients_id))

    return rounds_id, epochs_id, rounds_epochs_clients_acc, rounds_epochs_clients_id


def clients_acc_to_format(file_path, do_filter_zero=True):
    """ Convert the generated core accuracy csv file to the formet one.
        This core accuracy file is generated by the server when it collects the uploaded acc
        from clients in each round.

        For example, the data file can be:
            round, client_id, accuracy
            1    ,        1,      0.13,
            1    ,        5,      0.18,
            1    ,        4,      0.07,
            2    ,        3,      0.26,
            2    ,        8,      0.31,
            2    ,        9,      0.27,
            ...
        Convert to:
            round, client_1, client_2, client_3, client_4, client_5, ..., client_8, client_9, ..., client_15
            1    ,     0.13,         ,         ,     0.07,     0.18, ...,         ,         , ..., ....
            2    ,         ,         ,     0.26,         ,         , ...,     0.31,     0.27, ..., ....

    """
    round_name = 'round'
    client_prefix = "client_"

    per_acc_dataframe = pd.read_csv(file_path)
    # obtain the number of communication rounds
    rounds_pool = per_acc_dataframe[round_name].unique()
    # obtain the clients
    clients_pool = per_acc_dataframe['client_id'].unique()
    clients_pool = np.sort(clients_pool)

    round_col_name = [round_name]
    clients_col_name = [client_id for client_id in clients_pool]
    round_cols_name = round_col_name + clients_col_name

    def insert_round_clients(base_df, round_group_df):

        cliends_acc_df = round_group_df[['client_id', 'accuracy']]
        cliends_acc_df = cliends_acc_df.sort_values('client_id')
        round_row = {round_name: round_id}
        row_clients_col = dict(
            zip(cliends_acc_df.client_id, cliends_acc_df.accuracy))
        round_row.update(row_clients_col)

        #base_round_row =
        round_row_df = pd.DataFrame(round_row, index=[0])

        base_df = pd.concat([base_df, round_row_df], ignore_index=True)
        return base_df

    grouped_df = per_acc_dataframe.groupby([round_name])

    per_acc_new_df = pd.DataFrame(columns=round_cols_name)

    for round_id, round_group in grouped_df:
        per_acc_new_df = insert_round_clients(per_acc_new_df,
                                              round_group_df=round_group)

    # add prefix to clients' col
    clients_col_new_name = [
        client_prefix + str(client_id) for client_id in clients_pool
    ]
    cols_name = dict(zip(clients_col_name, clients_col_new_name))
    per_acc_new_df.rename(columns=cols_name, inplace=True)

    if do_filter_zero:
        per_acc_new_df.replace(0, np.nan, inplace=True)
        per_acc_new_df.dropna(subset=clients_col_new_name,
                              how='all',
                              axis=0,
                              inplace=True)

        # per_acc_new_df = per_acc_new_df.replace(np.nan, 0)

    return per_acc_new_df


def merge_clients_personalized_acc_to_format(clients_file_path):
    """ Convert the generated personalized accuracy csv file to the formet one.

        For example, the personalized acc file of each client can be:
            round, epoch, accuracy
            40    ,        0,      0.13,
            40    ,        1,      0.18,
            50    ,        0,      0.07,
            50    ,        1,      0.26,
            60    ,        0,      0.31,
            60    ,        1,      0.47,
            ...
        Convert to:
            round, client_1, client_2, client_3, client_4, client_5, ..., client_8, client_9, ..., client_15
            1    ,     0.13,         ,         ,     0.07,     0.18, ...,         ,         , ..., ....
            2    ,         ,         ,     0.26,         ,         , ...,     0.31,     0.27, ..., ....

    """
    merged_df = None
    for file_path in clients_file_path:
        client_name = os.path.basename(os.path.dirname(file_path))
        per_acc_dataframe = pd.read_csv(file_path)
        per_acc_dataframe.rename(
            columns={"personalization_accuracy": client_name + "_accuracy"},
            inplace=True)

        if merged_df is None:
            merged_df = per_acc_dataframe
        else:
            merged_df = pd.merge(merged_df,
                                 per_acc_dataframe,
                                 on=["round", "epoch"],
                                 how="outer")

    # sort the clients' accuracy columns based on the client id
    df_columns = list(merged_df.columns)
    df_clients_columns = [
        col_name for col_name in df_columns if 'client' in col_name
    ]
    df_ext_columns = [
        col_name for col_name in df_columns
        if col_name not in df_clients_columns
    ]
    df_clients_columns = sorted(df_clients_columns,
                                key=lambda x: int(x.split("_")[1]))

    df_columns = df_ext_columns + df_clients_columns
    merged_df = merged_df.reindex(columns=df_columns)

    # sort the clients' accuracy rows based on the round
    merged_df.sort_values('round', inplace=True)
    return merged_df


def merge_clients_encodes_to_format(clients_encoded_data_file_path):
    """ Convert the personalized encoded data to format. """
    merged_clients_encoded_dict = {}
    for client_files_path in clients_encoded_data_file_path:
        file_path = client_files_path[0]
        client_name = os.path.basename(os.path.dirname(file_path))
        merged_clients_encoded_dict[client_name] = {}

        for file_path in client_files_path:
            filename = os.path.basename(file_path)

            splited_strs = filename.split("_")
            round_id = int(re.sub("\D", "", splited_strs[1]))
            epoch_id = int(re.sub("\D", "", splited_strs[2]))
            phase_type = splited_strs[3].split("Encoded")[0]
            encoded_data = np.load(file_path)

            if round_id not in merged_clients_encoded_dict[client_name]:
                merged_clients_encoded_dict[client_name][round_id] = {}

            if epoch_id not in merged_clients_encoded_dict[client_name][
                    round_id]:
                merged_clients_encoded_dict[client_name][round_id][
                    epoch_id] = {}

            merged_clients_encoded_dict[client_name][round_id][epoch_id][
                phase_type] = encoded_data

    return merged_clients_encoded_dict


def acc_to_time_chuck_format(result_dict, time_chuck):
    """ Convert the generated accuracy csv file to the formet one. """
    # accuracy
    # elapsed_time
    for filename in list(result_dict.keys()):
        elapsed_time = result_dict[filename]["elapsed_time"]
        total_num = len(elapsed_time)

        target_acc_count = sum(
            [1 for acc_t in elapsed_time if acc_t < time_chuck])
        if target_acc_count < total_num:
            result_dict[filename]["elapsed_time"] = result_dict[filename][
                "elapsed_time"][:target_acc_count]
            result_dict[filename]["accuracy"] = result_dict[filename][
                "accuracy"][:target_acc_count]

    return result_dict
