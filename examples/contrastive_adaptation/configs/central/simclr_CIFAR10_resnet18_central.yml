
general:

    # performing different running mode
    # for different purposes
    # - central_code_test
    # - central
    # - script
    # - user
    running_mode: central

    file_logging: True

clients:
    # Type
    type: simple

    # The total number of clients
    total_clients: 1

    # The number of clients selected in each round
    per_round: 1

    # Should the clients compute test accuracy locally?
    do_test: True
    # whether perform the eval test at the final round
    # on all clients
    do_final_eval_test: True
    # Minotor the self-supervised learning by knn for
    # every 1 round
    test_interval: 1
    # Train the personalized model based on the
    # learned representation every 1 rounds
    eval_test_interval: 1
    # Whether simulate clients or not
    simulation: true

    random_seed: 1

server:
    address: 127.0.0.1
    port: 8014
    synchronous: true
    do_test: false

    # for the paths of models; checkpoints; results,
    # they utilize the same name, following the one defined in
    # plato.config:
    # {ssl_method_name}_{model_name}_{global_model_name}_{personalized_model_name}_{datasource}
    # - ssl_method_name: data.augment_transformer_name
    # - model_name: trainer.model_name
    # - global_model_name: data.global_model_name
    # - personalized_model_name: data.personalized_model_name
    # - datasource: data.datasource

    # set xxx here as the config will set the path by itself
    # thus we do not need to repeatly reset these paths
    model_path: xxx
    checkpoint_path: xxx

data:
    # The training and testing dataset
    datasource: CIFAR10

    # Number of samples in each partition
    #
    # This is one important parameter that
    # may lead the failure of the loss criterion part
    # if your loss criterion relies on the batch_size
    # as its argument. For example, the NT_Xent loss utilized
    # by the SimCLR method set the defined batch_size as the parameter.
    # However, at the end of one epoch, the left samples may smaller than
    # the batch_size. This makes the #loaded samples != batch_size.
    # Working on criterion that is defined with batch_size but receives loaded
    # samples whose size is smaller than the batch size may causes problems.
    # drop_last can alleviate this issue
    partition_size: 50000

    # IID or non-IID?
    sampler: iid
    testset_sampler: iid

    # The random seed for sampling data
    random_seed: 1


    # set the data wrapper to further process the data
    #   for the specific usage, such as constrastive learning
    # data_wrapper: Null
    data_wrapper: ContrastiveAugmentWrapper

    # set the data augmentation
    #   options: simsiam, byol, simclr
    augment_transformer_name: simclr
    # some methods apply the normalization to samples
    #   while others do not
    is_norm: True

trainer:
    # The type of the trainer
    type: basic
    # The maximum number of training rounds
    rounds: 1

    # Whether the training should use multiple GPUs if available
    parallelized: false

    # The maximum number of clients running concurrently
    max_concurrency: 5

    # The target accuracy
    target_accuracy: 0.9

    # Number of epochs for local training in each communication round
    #   The user is expected to carefully choose the batch_size to avoid
    # the memory allocation issue as the contrastive samples occupy more
    # space as more samples will be contained within one loading.
    epochs: 800
    batch_size: 512
    optimizer: Adam
    learning_rate: 0.003
    betas:
      - 0.9
      - 0.999
    eps: 0.00000008 # 1e-8
    weight_decay: 0.001

    lr_scheduler: StepLR
    lr_step_size: 20
    lr_gamma: 0.9

    epoch_log_interval: 1
    batch_log_interval: 50

    # Number of epochs for local training in each communication round
    #   The batch size for the downstream task can be larger as it
    # does not utilize the
    pers_epochs: 100
    pers_batch_size: 512
    pers_optimizer: Adam
    pers_learning_rate: 0.005
    pers_betas:
        - 0.9
        - 0.99
    pers_eps: 0.00000009 # 1e-8
    pers_weight_decay: 0.002

    # currently, we only support CosineAnnealingLR
    pers_lr_schedule: StepLR
    pers_lr_step_size: 20
    pers_lr_gamma: 0.9

    pers_epoch_log_interval: 2
    # temperature
    temperature: 0.5

    # image_size
    #  - CIFAR10 (Image size=32)
    #  - MNIST (Image size=28)
    image_size: 32

    # The machine learning model,
    # it behaves as the encoder for the ssl method
    # the final fc layer will be removed
    # however, in the central test, we do not use this
    #   but use the custom model
    external_encoder: False
    model_name: resnet_18
    # in general, the projection_dim = prediction_dim
    projection_dim: 256
    projection_hidden_dim: 2048

    # name of the component used as the global model
    global_model_name: whole

    personalized_model_name: pure_one_layer_mlp

    # whether to maintain the state of the trained personalized
    # model in each round
    # In general, for the contrastive self-supervised learning
    # every eval test should be a new learning process to train
    # the randomly initialized personalized model
    # Thus, setting do_maintain_per_state to be false to follow
    # this rule.
    # However, in some cases, we want to maintain the state of the
    # trained personalized model in each round.
    # Then, setting do_maintain_per_state to be True to follow this
    # rule.
    # For central learning with one round training, this is useless
    do_maintain_per_state: false

    monitor_name: knn
    knn_k: 200
    knn_t: 0.1
    hide_monitor_progress: False

    num_classes: 10

algorithm:
    # Aggregation algorithm
    type: fedavg

results:
    result_path: xxx