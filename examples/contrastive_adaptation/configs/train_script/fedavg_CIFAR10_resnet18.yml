
general:

    # performing different running mode
    # for different purposes
    # - central_code_test
    # - central
    # - script
    # - code_test
    # - user

    running_mode: script

    file_logging: True

clients:
    # Type
    type: simple

    # The total number of clients
    total_clients: 100

    # The number of clients selected in each round
    per_round: 100

    # Should the clients compute test accuracy locally?
    do_test: True

    # Should the client only perfrom the eval test without training
    # under the contrastive ssl.
    # only perfrom the training and test for the downstream task,
    # i.e., personalziation in each client
    only_personalization: False

    # whether perform the eval test at the final round
    # on all clients
    do_final_personalization: True
    # Minotor the self-supervised learning by knn for
    # every 1 round
    test_interval: 1
    # Train the personalized model based on the
    # learned representation every 1 rounds
    pers_learning_interval: 1

    # Whether simulate clients or not
    simulation: true

    random_seed: 1

server:
    address: 127.0.0.1
    port: 8012
    synchronous: true
    do_test: false

    ping_interval: 12000
    ping_timeout: 12000

    # for the paths of models; checkpoints; results,
    # they utilize the same name, following the one defined in
    # plato.config:
    # {ssl_method_name}_{model_name}_{global_model_name}_{personalized_model_name}_{datasource}
    # - ssl_method_name: data.augment_transformer_name
    # - model_name: trainer.model_name
    # - global_model_name: data.global_model_name
    # - personalized_model_name: data.personalized_model_name
    # - datasource: data.datasource

    # set xxx here as the config will set the path by itself
    # thus we do not need to repeatly reset these paths
    model_path: xxx
    checkpoint_path: xxx


data:
    # The training and testing dataset
    datasource: CIFAR10

    # Number of samples in each partition
    #
    # This is one important parameter that
    # may lead the failure of the loss criterion part
    # if your loss criterion relies on the batch_size
    # as its argument. For example, the NT_Xent loss utilized
    # by the SimCLR method set the defined batch_size as the parameter.
    # However, at the end of one epoch, the left samples may smaller than
    # the batch_size. This makes the #loaded samples != batch_size.
    # Working on criterion that is defined with batch_size but receives loaded
    # samples whose size is smaller than the batch size may causes problems.
    # drop_last can alleviate this issue
    partition_size: 600
    test_partition_size: 600

    # IID or non-IID?
    sampler: noniid
    testset_sampler: noniid

    # The concentration parameter for the Dirichlet distribution
    concentration: 0.3

    # sampler: label_quantity_noniid
    # testset_sampler: label_quantity_noniid

    # per_client_classes_size: 2

    # The random seed for sampling data
    random_seed: 1


trainer:
    # The type of the trainer
    type: basic
    # The maximum number of training rounds
    rounds: 1

    # Whether the training should use multiple GPUs if available
    parallelized: false

    # The maximum number of clients running concurrently
    max_concurrency: 5


    # The target accuracy
    target_accuracy: 0.9

    # Number of epochs for local training in each communication round
    #   The user is expected to carefully choose the batch_size to avoid
    # the memory allocation issue as the contrastive samples occupy more
    # space as more samples will be contained within one loading.
    epochs: 100
    batch_size: 64

    optimizer: SGD
    learning_rate: 0.05
    momentum: 0.9
    weight_decay: 0.00001

    # Learning rate schedule
    lr_schedule: LambdaLR
    lr_gamma: 0.1
    lr_milestone_steps: 30ep,80ep

    # Number of epochs for local training in each communication round
    #   The batch size for the downstream task can be larger as it
    # does not utilize the
    pers_epochs: 10
    pers_batch_size: 64
    pers_optimizer: SGD
    # lr = 0.1 * batch_size / 256, see section B.6 and B.7 of SimCLR paper.
    pers_learning_rate: 0.1
    pers_momentum: 0.9
    pers_weight_decay: 0.0

    # currently, we only support CosineAnnealingLR
    pers_lr_schedule: MultiStepLR
    pers_lr_milestones: 60,80
    pers_lr_gamma: 0.1

    pers_epoch_log_interval: 2
    pers_epoch_model_log_interval: 2

    # The machine learning model,
    # it behaves as the encoder for the ssl method
    # the final fc layer will be removed
    # however, in the central test, we do not use this
    #   but use the custom model
    model_name: resnet_18
    personalized_model_name: resnet_18

    num_classes: 10

algorithm:
    # Aggregation algorithm
    type: fedavg

results:
    result_path: xxx