clients:
    # The total number of clients
    total_clients: 3

    # The number of clients selected in each round
    per_round: 3

    # Should the clients compute test accuracy locally?
    do_test: false

    # Whether client heterogeneity should be simulated
    speed_simulation: true

    # The simulation distribution
    simulation_distribution:
        # staleness is simulated from uniform distribution as mentioned in Section 5.2
        distribution: uniform
        low: 0
        high: 20

    # Should clients really go to sleep, or should we just simulate the sleep times?
    sleep_simulation: true

    # If we are simulating client training times, what is the average training time?
    avg_training_time: 20

server:
    address: 127.0.0.1
    port: 8002

    # Should we operate in sychronous mode?
    synchronous: false

    # Should we simulate the wall-clock time on the server? Useful if max_concurrency is specified
    simulate_wall_time: true

    # What is the minimum number of clients that need to report before aggregation begins?
    minimum_clients_aggregated: 6

    # What is the staleness bound, beyond which the server should wait for stale clients?
    staleness_bound: 10

    random_seed: 1

    model_path: examples/park_env/models/pretrained

    checkpoint_path: examples/park_env/checkpoints

data:
    # The training and testing dataset
    datasource: FashionMNIST

    # Number of samples in each partition
    partition_size: 200

    # Client's partition size distribution
    partition_distribution:
        distribution: uniform
        low: 0.4
        high: 1.0

    # IID or non-IID?
    sampler: noniid

    # The concentration parameter for the Dirichlet distribution
    concentration: 0.5

    # The random seed for sampling data
    random_seed: 1

trainer:
    #The type of trainer
    type: basic
    # The maximum number of training rounds
    rounds: 1000

    # The maximum number of clients running concurrently
    max_concurrency: 4

    # The target accuracy
    # TODO: we should have a train reward, or target number of steps
    # I think the target number of steps is in the algorithm.iterations down below
    target_accuracy: 5000

    # Number of epoches for local training in each communication round
    epochs: 10
    batch_size: 32
    optimizer: SGD
    learning_rate: 0.01
    momentum: 0.9
    weight_decay: 0.0

    # The machine learning model
    model_name: lenet5

# TODO: entropy and batch size is not set
algorithm:
    # Aggregation algorithm
    type: fedavg

    # RL agent
    discrete_action_space: false
    n_features: 4
    max_action: 1
    min_action: -1
    max_episode: 2000
    alpha: 5 # controls the decreasing rate of the mapping function
    beta: 20 # coefficient used in reward function
    theta: 0.005 # threshold for stdev(pre_acc)
    base: 1000 # for exponential function in state normalization
    log_interval: 10
    mode: train # train/test
    pretrained: false
    pretrained_iter: 0
    test_step: 100

    # RL policy
    model_name: td3
    # reward discounted factor
    gamma: 0.99
    tau: 0.005
    learning_rate: 0.001
    # Noise added to target policy during critic update
    policy_noise: 0.2
    # Range to clip target policy noise
    noise_clip: 0.5
    # Frequency of delayed policy updates
    policy_freq: 2
    # Frequency of evaluation steps once every eval_freq episodes
    eval_freq: 50
    # batch size to be sampled from memory
    batch_size: 256
    #entropy ratio during training
    entropy_ratio: 10.0 #or 5
    #grad clip
    grad_clip_val: 10

    hidden_size: 256
    # steps sampling random actions
    start_steps: 10000
    # Maximum replay buffer size
    max_replay_size: 1000000

    # whether use LSTM or FC nets
    recurrent_actor: false

    #Number of iterations
    iterations: 1000

    # Exploration noise - STD value of exploration Gaussian Noise
    expl_noise: 0.1

    # Number of episodes to run each round
    max_round_episodes: 200

    # Curriculum learning, fixed difficulty level for motivation experiment
    difficulty_levels: 3

    #If we should save the model or not
    save_models: False

    env_name: abr

    env_park_name: abr_sim

    algorithm_name: a2c_

results:
    # Write the following parameter(s) into a CSV
    types: round, accuracy, elapsed_time, comm_time, round_time

    # Plot results (x_axis-y_axis)
    plot: round-accuracy, elapsed_time-accuracy

    results_dir: examples/park_env/results

    file_name: A2C_ABR
